@startuml

package javafx.application{
class Application{
}
}


package moteurJeu{

class MoteurJeu{
- <static> width: int
- <static> height: int
- <static> FPS: int
+ <static> launch(jeu: Jeu, dessin: DessinJeu)
+ <static> setTaille(width: int, height: int)
+ <static> setFPS(FPS: int)
+ start(primaryStage: Stage)
+ startAnimation(canvas: Canvas)
}

Application <|-- MoteurJeu



interface Jeu{
  + init()
  + update(seconds: double, clavier: Clavier)
  + etreFini(): boolean
}

MoteurJeu "1" --> "1" Jeu : - <static> jeu


interface DessinJeu{
  + dessinerJeu(jeu: Jeu, canvas: Canvas)
}

MoteurJeu "1" --> "1" DessinJeu : - <static> dessin

class Clavier {
  - haut: boolean
  - bas: boolean
  - gauche: boolean
  - droite: boolean
  + appuyerTouche(event : KeyEvent)
  + relacherTouche(event : KeyEvent)
}

MoteurJeu "1" --> "1" Clavier : - clavier
}


package gameLaby.laby{

class LabyDessin {
  + <static final> TAILLE: int
  + dessinerJeu(jeu: Jeu, canvas: Canvas)
  + dessinerMurSol(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerAventurier(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerMonstre(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerSerpent(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerCaisse(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerDepot(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerEscalier(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerTorche(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerFantome(gc: GraphicsContext, labyrinthe: Labyrinthe)
  + dessinerTresor(gc: GraphicsContext, labyrinthe: Labyrinthe)
}



class Aventurier {
  + Aventurier(dx: int, dy: int)
  + etrePresent(dx: int, dy: int): boolean
}

Aventurier --|> Personnage



class Caisse {
  - x: int
  - y: int
  + Caisse(x: int, y: int)
  + etrePresent(dx: int, dy: int) : boolean
}

Caisse --|> Element


class Combat {
  + etatCombat: boolean
  + toursPj: boolean
  + Combat(e: Element, j: Element)
  + attaque(codeAttaque: int)
  + getPj(): Aventurier
}

Combat -> Aventurier: -Aventurier:PJ
Combat -> Personnage: -Personnage:adversaire


class Coordonnee {
  - x: int
  - y: int
  + Coordonnee(x: int, y: int)
  + getX(): int
  + getY(): int
  + setX(x: int)
  + setY(y: int)
}

class Depot {
  - x: int
  - y: int
  + Depot(x: int, y: int)
  + etrePresent(dx: int, dy: int) : boolean
}

Depot --|> Element


class Echappatoire {
  + Echappatoire()
  + afficher()
  + typeToIndex(type: char)
  + indexToType(index: int)
  + determinerNiv(x: int, y: int, nMap: int, niveau: int, type: char)
  + identifierEchap(niveau: int, type: char, nMap: int)
  + add(x: int, y: int, nMap: int, niveau: int, type: char)
  + getEscpNv(nv: int) : ArrayList<int []>
}

abstract class Element {
  + getX(): int
  + getY(): int
  + setX(x: int)
  + setY(y: int)
}

class Entite {
  + Entite(x: int, y: int)
  + estPresent(x: int, y: int) : boolean
}

Entite --|> Element


class Fantome {
  + Fantome(dx: int, dy: int, HP: int)
}

Fantome --|> Personnage


class LabyJeu {
  + LabyJeu()
  + update(secondes: double, clavier: Clavier)
  + init()
  + etreFini() : boolean
  + getLabyrinthe() : Labyrinthe
  + setLabyrinthe(l: Labyrinthe)
  + newLaby(name: String, nv: int, es: Echappatoire, nM: int) : LabyJeu
}

LabyJeu ..|> Jeu
LabyJeu"*" -> "*"Labyrinthe: Labyrinthe: laby


class Labyrinthe {
  + <static final> MUR: char
  + <static final> MONSTRE: char
  + <static final> SERPENT: char
  + <static final> PJ: char
  + <static final> VIDE: char
  + <static final> ESCAPE1: char
  + <static final> ESCAPE2: char
  + <static final> ESCAPE3: char
  + <static final> ESCAPE4: char
  + <static final> ESCAPE5: char
  + <static final> ESCAPE6: char
  + <static final> ESCAPE7: char
  + <static final> ESCAPE8: char
  + <static final> ESCAPE9: char
  + <static final> DEPOT: char
  + <static final> CAISSE: char
  + <static final> TORCHE: char
  + <static final> FANTOME: char
  + <static final> TRESOR: char
  + <static final> HAUT: String
  + <static final> BAS: String
  + <static final> GAUCHE: String
  + <static final> DROITE: String
  + murs: boolean[][]
  + nvLaby: int
  + nMap: int
  + tailleMax: int[]
  + getSuivant(x: int, y: int, action: String) : int[]
  + Labyrinthe(nom: String)
  + personnagePresent(x: int, y: int) : boolean
  + elementPresentObject(x: int, y: int): Personnage
  + caisseOuTrouPresent(x: int, y: int) : boolean
  + deplacerPerso(action: String)
  + supprimerMonstre(m: Personnage)
  + actualiserVieAventurier(combat: Combat)
  + tresorTrouve()
  + caisseSurTrou()
  + aventurierSurTorche()
  + aventurierDansTrou() : boolean
  + deplacerMonstre()
  + deplacerFantome()
  + deplacerSerpent()
  + etreFini(): boolean
  + getLengthY(): int
  + getLength(): int
  + getMur(x: int, y: int): boolean
  + playerInEscape() : int
  + getCombat() : Combat
}
Labyrinthe "*"-->"*" Serpent: -ArrayList<Serpent>: serpents
Labyrinthe "*"-->"*" Monstre: -ArrayList<Monstre>: monstres
Labyrinthe "*"-->"*" Personnage: -ArrayList<Personnage>: personnages
Labyrinthe "*"-->"*" Echappatoire: -Echappatoire: escapes
Labyrinthe "*"->"*" ListeElements: -ListeElements: depots
Labyrinthe "*"->"*" ListeElements: -ListeElements: caisses
Labyrinthe "*"-->"*" Torche: -ArrayList<Torche>: torches
Labyrinthe "*"-->"*" Fantome: -ArrayList<Fantome>: fantomes
Labyrinthe "*"-->"1" Combat: -Combat: combat
Labyrinthe "*"-->"*" Personnage: -Personnage: monstreEnCombat
Labyrinthe "*"->"*" Tresor: -Tresor: tresors


class ListeElements {
  + ListeElements()
  + ajouter(e: Element)
  + setListeElements(i: int, e: Element)
  + getElement(x: int, y: int) : Element
  + etreElement(x: int, y: int) : boolean
  + indiceElement(x: int, y: int) : int
  + getTaille() : int
  + getElementByIndice(i: int) : Element
  + supprimerElement(i: int)
}

ListeElements "*"->"*" Element: -ArrayList<Element>: listeE

class Monstre {
  + Monstre(dx: int, dy: int, HP: int)
}

Monstre --|> Personnage


abstract class Personnage {
  - HP: double
  + <final> HPMax: double
  + Personnage(dx: int, dy: int, HP: int)
  + etrePresent(dx: int, dy: int): boolean
  + getHP() : double
  + setHP(HP: double)
  + getHPMax() : double
}

Personnage --|> Element


class Serpent {
  + Serpent(dx: int, dy: int, HP: int)
  + getCorp(): ArrayList<Coordonnee>
}

Serpent --|> Personnage
Serpent "1"->"*" Coordonnee: -Coordonnee: corp

Element "*"-> "1"Coordonnee: coordonnee
class Torche {
  + <static final> RAYONTORCHE: int
  + Torche(x: int, y:int)
}

Torche --|> Entite


class Tresor {
  + Tresor(x: int, y: int)
}

Tresor --|> Entite


class MainLaby{
+ main(String[] args)
}

MainLaby --> MoteurJeu : <<use>>
LabyDessin ..|> DessinJeu
Labyrinthe --> Aventurier: -Aventurier: pj
@enduml
